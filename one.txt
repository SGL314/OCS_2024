JSR TELA_BRANCA_margem
BRK


TELA_BRANCA_margem:
  LDX #$0
  STX $0710 ;tmpx
  LDX #$0
  STX $0711 ;tmpy

  LDX #$20
  STX $0722 ;resy (init linhas)
  LDX #1
  STX $0720 ;resa (cor)
  LDX #$1e
  STX $0731 ;stox (linhas)
  JSR set_address

setting:
  LDX #$1e
again:
  JSR get_cor
  JSR get_pos
  JSR get_address
  STA ($01),Y
  CPX #$0
BNE again

JSR reset
TXA
TAY
ADC #$20

JSR reset
JSR qt_vezes
JSR reset
JSR get_cor
JMP setting

end:
BRK



get_pos:
  DEX
  LDY $0722
  INY
  STY $0722

  STY $0712
  STA $0710
  TYA
  ADC #$ff
  ;verifying
  CPY #$40
  BEQ next_two_pos
  CPY #$60
  BEQ next_two_pos
  CPY #$80
  BEQ next_two_pos
  CPY #$00
  BEQ next_two_pos
  ;
  ret_get_pos:
  LDA $0710
  LDY $0712
  
  end_get_pos:
  RTS

next_two_pos:
  STY $0722
  RTS


reset:
LDX #0
LDY #0
LDA #0
RTS

get_cor:
LDY $0720 ;cor
STY $0720
TYA
RTS

get_ncor:
LDX $0721 ;cor
INX
STX $0721
RTS

qt_vezes:
LDX $0731
DEX
STX $0731
TXA
CPX #$0
BEQ end
RTS

get_address:
CPY #$00
BEQ add_address
RTS

set_address:
LDX #$ff ;last
STX $01
LDX #$01 ;first
STX $02
RTS

add_address:
STX $0711
LDX $02
INX
STX $02
LDX $0711
RTS

; NOTACAO
; $ - hexadecimal
; # - numero literal
; : - define um label

; MNEMONICOS
; ---default---
; _ - registrador
; ld_
; st_ - STorage in _
; st_,X - STorage in _ and add X
; t__ - Transfer _ to _
; inx - INcrement X
; dex - DEcrement X
; cpx - ComPare if _ is equals to the byte (z?1:0)
; brk - BReaK
; adc - ADd value to A
; ---jumpers---
; bne - Branch Jump label z=0 (Brench Non Equals)
; beq - Jump label z=1 (Branch EQuals)
; jmp
; jrs - jump subroutine
; rts - return subroutine

; MEMORIA
; 0200 - pixels na tela
